/*
 * Protocol:   EDHOC-PSK
 * Source:     draft-ietf-lake-edhoc-psk
 * Model:      Fixed for concurrent sessions

 Scenarios to check ideally:
 - `tamarin-prover -D=LeakShare`
 - `tamarin-prover -D=LeakSessionKey`
 - `tamarin-prover -D=LeakPSK`
 - `tamarin-prover -D=LeakIdentityI`
 - `tamarin-prover -D=LeakIdentityR`
*/

theory edhoc_psk_sapic

begin

builtins: diffie-hellman, hashing, xor

functions:
  method_four/0, length/0,
  hash_length/0, key_length/0, iv_length/0, plaintext_length/0, aead_length/0,
  edhoc_kdf/4,
  aeadenc/4, aeaddec/4 [destructor],
  wrap/1,
  hash/1, hkdfextract/2, hkdfexpand/2,
  encxor/2, decxor/2 [destructor],

  // Credential modeling functions
  make_cred/2,        // make_cred(subject_id, psk) -> credential
  get_subject/1 [destructor],      // get_subject(credential) -> subject_id
  make_id/3,           // make_id(cred_i, cred_r, psk) -> ID_CRED_PSK
  get_cred_i/1 [destructor, private],  // get_cred_i(ID_CRED_PSK) -> cred_i
  get_cred_r/1 [destructor, private],  // get_cred_r(ID_CRED_PSK) -> cred_r
  get_psk/1 [destructor, private]      // get_psk(ID_CRED_PSK) -> psk

equations:
  aeaddec(aeadenc(m,k,r,ad),k,r,ad) = m,
  decxor(encxor(m,k),k) = m,
  get_subject(make_cred(subject, psk)) = subject,
  get_cred_i(make_id(cred_i, cred_r, psk)) = cred_i,
  get_cred_r(make_id(cred_i, cred_r, psk)) = cred_r,
  get_psk(make_id(cred_i, cred_r, psk)) = psk

#include "Headers.splib"

/* -------------------- Initiator -------------------- */
let I(~cid, method, ID_CRED_PSK) =
  in(<suitesI,C_I,EAD_1>);
  event MethodOk(method);

  new ~X;
  new ~EAD_3;

  event Share(~X);
  event LeakEAD(~EAD_3);

  (
    CompromiseShare(~X) |
    let CRED_I = get_cred_i(ID_CRED_PSK) in
    let CRED_R = get_cred_r(ID_CRED_PSK) in
    let psk    = get_psk(ID_CRED_PSK) in
    let subject_i = get_subject(CRED_I) in
    let subject_r = get_subject(CRED_R) in
    event InitiateWithID(subject_i, subject_r);
    // event ExposeSubjectI(subject_i);

    event Start_I(~cid, method, subject_i);

    let G_X = 'g'^~X in
    let m1 = <method,suitesI,G_X,C_I,EAD_1> in
    out(m1);

    in(m2);
    let < G_Y, CIPHERTEXT_2 > = m2 in
    let TH_1 = hash(<wrap(method), wrap(suitesI), wrap(G_X), wrap(C_I), EAD_1>) in
    let TH_2 = hash(<wrap(G_Y), wrap(TH_1)>) in

    let G_YX = G_Y^~X in
    let PRK_2e = hkdfextract(TH_2, G_YX) in
    let KEYSTREAM_2A = edhoc_kdf(PRK_2e,'tzero',TH_2,plaintext_length) in
    let plaintext_2 = decxor(CIPHERTEXT_2, KEYSTREAM_2A) in
    let < C_R, EAD_2> = plaintext_2 in

    if method = method_four() then (
        let PRK_3e2m = PRK_2e in
        event DerivedIShared(G_YX);

        let TH_3 = hash(<wrap(TH_2), plaintext_2>) in
        let SALT_4e3m = edhoc_kdf(PRK_3e2m, 'five', TH_3, hash_length) in
        let PRK_4e3m = hkdfextract(psk, SALT_4e3m) in

        let KEYSTREAM_3A = edhoc_kdf(PRK_3e2m, 'eleven', TH_3, plaintext_length) in
        let K_3 = edhoc_kdf(PRK_4e3m, 'twelve', TH_3, key_length) in
        let IV_3 = edhoc_kdf(PRK_3e2m, 'thirteen', TH_3, iv_length) in

        let external_aad_3 = <ID_CRED_PSK, TH_3, CRED_I, CRED_R> in
        let ad_3 = <'Encrypt0','empty',external_aad_3> in
        let plaintext_3b = <~EAD_3> in
        let ciphertext_3b = aeadenc(plaintext_3b, K_3, IV_3, ad_3) in
        let plaintext_3a = <ID_CRED_PSK, ciphertext_3b> in
        let m3 = encxor(plaintext_3a, KEYSTREAM_3A) in

        let TH_4 = hash(<wrap(TH_3), ID_CRED_PSK, plaintext_3b, CRED_I, CRED_R>) in
        let K_4 = edhoc_kdf(PRK_4e3m,'eight', TH_4, key_length) in
        let IV_4 = edhoc_kdf(PRK_3e2m,'nine', TH_4, iv_length) in
        let PRK_out = edhoc_kdf(PRK_4e3m,'seven', TH_4, hash_length) in
        event DerivedI(~cid, method, subject_i, subject_r, PRK_out, ~X, G_Y);
        event SendIData(PRK_out,method, subject_i, subject_r, psk,~X,G_Y,<TH_2,TH_3,TH_4,suitesI, EAD_1, EAD_2, ~EAD_3, m1, plaintext_2, plaintext_3a>);

        out(m3);
        event TransmitEAD(m3, ~EAD_3, PRK_4e3m);
        
        ( 
            (
                in(m4);
                let external_aad_4 = <TH_4> in
                let ad_4 = <'Encrypt0','empty',external_aad_4> in
                let plaintext_4 = aeaddec(m4, K_4, IV_4, ad_4) in
                let EAD_4 = plaintext_4 in
                event AcceptIData(PRK_out,method, subject_i, subject_r, psk,~X,G_Y,<TH_2,TH_3,TH_4,suitesI, EAD_1, EAD_2, ~EAD_3, m1, plaintext_2, plaintext_3a, plaintext_4>);
                event AcceptI(~cid, method, subject_i, subject_r, PRK_out, ~X, G_Y);
                event FinishI(~cid, PRK_out);
                0
            )
            |
            leakSKey(PRK_out)
        )
    ) else (0)
  )

/* -------------------- Responder -------------------- */
let R(~cid, ID_CRED_PSK) =
  in(<C_R,EAD_2,suitesR>);
  in(m1);
  let <method,suitesI,G_X,C_I,EAD_1> = m1 in

  event MethodOk(method);

  new ~Y;
  new ~EAD_4;
  event Share(~Y);
  event LeakEAD(~EAD_4);

  (
    CompromiseShare(~Y) |
    let CRED_I = get_cred_i(ID_CRED_PSK) in
    let CRED_R = get_cred_r(ID_CRED_PSK) in
    let psk    = get_psk(ID_CRED_PSK) in
    let subject_i = get_subject(CRED_I) in
    let subject_r = get_subject(CRED_R) in
    event RespondWithID(subject_i, subject_r);
    // event ExposeSubjectR(subject_r);

    event Start_R(~cid, method, subject_r);

    let G_Y = 'g'^~Y in
    let G_XY = G_X^~Y in

    let TH_1 = hash(<wrap(method), wrap(suitesI), wrap(G_X), wrap(C_I), EAD_1>) in
    let TH_2 = hash(<wrap(G_Y), wrap(TH_1)>) in
    let PRK_2e = hkdfextract(TH_2, G_XY) in

    if method = method_four() then (
      let plaintext_2 = <C_R, EAD_2> in
      let KEYSTREAM_2A = edhoc_kdf(PRK_2e,'tzero', TH_2, plaintext_length) in
      event THRShared(TH_2);
      event DerivedRShared(G_XY);

      let m2 = <G_Y, encxor(plaintext_2, KEYSTREAM_2A)> in
      event SendRData(method, subject_i, subject_r, psk,<TH_2,suitesI, EAD_1, EAD_2, m1, plaintext_2>);							    
      out(m2);

      in(m3);

      let TH_3 = hash(<wrap(TH_2), plaintext_2>) in
      let PRK_3e2m = PRK_2e in
      let SALT_4e3m = edhoc_kdf(PRK_3e2m,'five', TH_3, hash_length) in
      let PRK_4e3m = hkdfextract(psk, SALT_4e3m) in
      let KEYSTREAM_3 = edhoc_kdf(PRK_3e2m,'eleven', TH_3, plaintext_length) in
      let K_3 = edhoc_kdf(PRK_4e3m,'twelve', TH_3, key_length) in
      let IV_3 = edhoc_kdf(PRK_3e2m,'thirteen', TH_3, iv_length) in
      let plaintext_3a = decxor(m3, KEYSTREAM_3) in
      let <ID_CRED_PSK_in, ciphertext_3b> = plaintext_3a in

      if ID_CRED_PSK_in = ID_CRED_PSK then (
        let external_aad_3 = <ID_CRED_PSK, TH_3, CRED_I, CRED_R> in
        let ad_3 = <'Encrypt0','empty',external_aad_3> in
        let plaintext_3b = aeaddec(ciphertext_3b, K_3, IV_3, ad_3) in
        let <EAD_3> = plaintext_3b in
        let TH_4 = hash(<wrap(TH_3), ID_CRED_PSK, plaintext_3b, CRED_I, CRED_R>) in
        let K_4 = edhoc_kdf(PRK_4e3m,'eight', TH_4, key_length) in
        let IV_4 = edhoc_kdf(PRK_3e2m,'nine', TH_4, iv_length) in
        let PRK_out = edhoc_kdf(PRK_4e3m,'seven', TH_4, hash_length) in
        let external_aad_4 = <TH_4> in
        let ad_4 = <'Encrypt0','empty',external_aad_4> in
        let m4 = aeadenc(~EAD_4, K_4, IV_4, ad_4) in
        event DerivedR(~cid,PRK_out,~Y,G_X);
        event TransmitEAD(m4, ~EAD_4, PRK_out);
        event AcceptR(~cid, method, subject_i, subject_r, PRK_out, G_X, ~Y);
        event AcceptRData(PRK_out,method, subject_i, subject_r,psk,~Y,G_X,<TH_2,TH_3,TH_4,suitesI, EAD_1, EAD_2, EAD_3, m1, plaintext_2, plaintext_3a>);
        event FinishR(~cid, PRK_out);
        out(m4);
        (
            0 
            |
            leakSKey(PRK_out)
        )
      ) else (0)
    ) else (0)
  )

/* -------------------- Main Process -------------------- */

let compromise(psk) =
    in('Comp'); event Compromise(psk); event SharePSK(psk); out(psk)

let LeakSubjectI(subj_i) =
    in('Comp'); event ExposeSubjectI(subj_i); out(subj_i)

let LeakSubjectR(subj_r) =
    in('Comp'); event ExposeSubjectR(subj_r); out(subj_r)

process:
  new ~psk;
  event Honest(~psk);
  event SharePSK(~psk);

  !(
    new ~cid;
    new ~subject_i;
    new ~subject_r;

    let cred_i = make_cred(~subject_i, ~psk) in
    let cred_r = make_cred(~subject_r, ~psk) in
    let ID_CRED_PSK = make_id(cred_i, cred_r, ~psk) in

    (
        !I(~cid, method_four(), ID_CRED_PSK)
        | !R(~cid, ID_CRED_PSK)
        | compromise(~psk)   // optional PSK compromise
        | LeakSubjectI(~subject_i)
        | LeakSubjectR(~subject_r)
        )
    )

#include "LakePropertiesPSK.splib"

restriction OnlyMethodFour:
  "All method #i. MethodOk(method) @i ==> method = method_four()"

end
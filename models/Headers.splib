// headers.splib for EDHOC-PSK (method_four)
// We include here the attacker capabilities

#ifdef WeakAEAD
functions: aeadmalleable/2
equations: aeadmalleable(aeadenc(m,r,k,aa),r2) = aeadenc(m,r2,k,aa)
#endif

#ifdef LeakShare
let CompromiseShare(s) =
    event LeakShare(s); event LeakShare('g'^s); out(s)
#else
let CompromiseShare(s) = event LeakShare('null'); 0

export queries:
"
axiom k:bitstring; event(eShare( k )) && attacker( k ) ==> event(eLeakShare(k)).
"
#endif

#ifdef LeakSessionKey
let leakSKey(key) =
 event LeakSessionKey(key); out(key)
#else
let leakSKey(key) =  event LeakSessionKey('null')
#endif

#ifdef LeakPSK
let compromise(psk) =
    in('Comp');
    event Compromise(psk);
    out(psk)
#else
let compromise(psk) = event Compromise('null')
#endif



// Not used for the moment

// #ifdef CollapseHash
// functions: hout/0
// equations: hash(x)=hout
// #endif

// #ifdef NeutralCheck
// functions: check_grp/1 [destructor]
// equations: check_grp(x) = x
// #else
// functions: check_grp/1 [destructor], const_grp/0
// equations: check_grp(x) = const_grp
// #endif


// #ifdef CredCheck
// functions: check_cred/1 [destructor]
// equations: check_cred(x) = x
// #else
// functions: check_cred/1 [destructor], const_cred/0
// equations: check_cred(x) = const_cred
// #endif

// #ifdef XorPrecise
// functions: encxor/2, decxor/2 
// equations: decxor(encxor(m,x),x) = m, decxor(encxor(m,x),m) = x
// #else
// functions: encxor/2, decxor/2  [destructor]
// equations: decxor(encxor(m,x),x) = m
// #endif

// This we always enforce
// #ifdef MethodFour

// export queries:
// "
// restriction m:bitstring; event(MethodOk(m)) ==> m=method_four.
// "

// restriction method_four:
//  "All x #i. MethodOk(x)@i ==> x=method_four"
// #endif
/*
 * Protocol:   EDHOC-PSK with proper credential modeling
 * 
 * Credentials contain subject identity information and reference the PSK
 */

theory edhoc_psk_tamarin

begin

builtins: diffie-hellman, hashing, xor

functions: method_four/0, length/0,
           hash_length/0, key_length/0, iv_length/0, plaintext_length/0, aead_length/0,
           error_code_one/0, error_code_two/0,
           suitesIConst/0, suitesRConst/0,
           edhoc_kdf/4,
           aeadenc/4, aeaddec/4 [destructor],
           make_id/1,
           wrap/1,
           hash/1, hkdfextract/2, hkdfexpand/2,
           // Credential modeling functions
           make_cred/2,        // make_cred(subject_id, psk) -> credential
           get_subject/1,      // get_subject(credential) -> subject_id  
           get_psk/1          // get_psk(credential) -> psk
           // Helper functions for tuple destructuring
          //  get_first/1, get_second/1, get_third/1, get_fourth/1, get_fifth/1

equations: aeaddec(aeadenc(m,k,r,ad),k,r,ad) = m,
          //  get_first(<a,b,c,d,e>) = a,
          //  get_second(<a,b,c,d,e>) = b,
          //  get_third(<a,b,c,d,e>) = c,
          //  get_fourth(<a,b,c,d,e>) = d,
          //  get_fifth(<a,b,c,d,e>) = e,
           // Credential equations
           get_subject(make_cred(subject, psk)) = subject,
           get_psk(make_cred(subject, psk)) = psk

// Adversary can leak DH shares
rule LeakShare:
  [ !DHExp(~x) ]
  --[ LeakShare('g'^~x) ]->
  [ Out(~x) ]

// Adversary can leak session keys
rule LeakSessionKey:
  [ !SessionKey(k) ]
  --[ LeakSessionKey(k) ]->
  [ Out(k) ]

// Adversary can leak PSKs (but not if honest)
rule LeakPSK:
  [ !PSK(psk) ]
  --[ LeakPSK(psk) ]->
  [ Out(psk) ]

// Setup rules for generating fresh values and credentials
rule HonestPSK:
  [ Fr(~psk), Fr(~subject_i), Fr(~subject_r) ]
  --[ ExposeSubjectI(~subject_i), ExposeSubjectR(~subject_r), ExposeHonest(~psk) ]->
  [ 
    !Honest(~psk), 
    !PSK(~psk),
    !CredI(make_cred(~subject_i, ~psk)),  // Initiator's credential
    !CredR(make_cred(~subject_r, ~psk)),  // Responder's credential
    !SubjectI(~subject_i),                // Initiator's identity
    !SubjectR(~subject_r)                 // Responder's identity
    // !CredSubjectI(make_cred(~subject_i, ~psk), ~subject_i),  // Connection fact
    // !CredSubjectR(make_cred(~subject_r, ~psk), ~subject_r)   // Connection fact
  ]

rule DriverI:
  let method = method_four in
  [ Fr(~C_I), Fr(~EAD_1), Fr(~suitesI) ]
  -->
  [ InitiatorParams(method, ~suitesI, ~C_I, ~EAD_1) ]

rule DriverR:
  [ Fr(~C_R), Fr(~EAD_2), Fr(~suitesR) ]
  -->
  [ ResponderParams(~C_R, ~EAD_2, ~suitesR) ]

rule SessionStart:
  let
    subject_i = get_subject(cred_i)
    subject_r = get_subject(cred_r)
  in
  [ 
    InitiatorParams(method, suitesI, C_I, EAD_1),
    ResponderParams(C_R, EAD_2, suitesR),
    !PSK(psk),
    !Honest(psk),
    !CredI(cred_i),
    !CredR(cred_r),
    !SubjectI(subject_i),  
    !SubjectR(subject_r) 
  ]
  --[ 
    // Ensure credentials use the same PSK
    Eq(get_psk(cred_i), psk),
    Eq(get_psk(cred_r), psk)
  ]->
  [
    !StartSession(method, suitesI, C_I, EAD_1, C_R, EAD_2, suitesR, psk, cred_i, cred_r)
  ]


// INITIATOR'S RULES

rule I_1_SendMessage1:
  let 
    G_X = 'g'^~X
    m1 = <method, suitesI, G_X, C_I, EAD_1>
  in
  [
    !StartSession(method, suitesI, C_I, EAD_1, C_R, EAD_2, suitesR, psk, cred_i, cred_r),
    Fr(~X),
    Fr(~EAD_3),
    Fr(~cid)
  ]
  --[ 
    MethodOk(method),
    Start_I(~cid, method, psk, get_subject(cred_i)),
    !Honest(psk)
  ]->
  [
    St_I_1(~cid, method, suitesI, C_I, EAD_1, ~X, G_X, ~EAD_3, psk, cred_i, cred_r),
    !DHExp(~X),
    Out(m1)
  ]

rule I_2_ReceiveMessage2:
  let
    TH_1 = hash(<wrap(method), wrap(suitesI), wrap(G_X), wrap(C_I), EAD_1>)
    TH_2 = hash(<wrap(G_Y), wrap(TH_1)>)
    G_YX = G_Y^X
    PRK_2e = hkdfextract(G_YX, TH_2)
    KEYSTREAM_2A = edhoc_kdf(PRK_2e, 'azero', TH_2, plaintext_length)
    plaintext_2 = CIPHERTEXT_2 XOR KEYSTREAM_2A
  in
  [
    St_I_1(cid, method, suitesI, C_I, EAD_1, X, G_X, EAD_3, psk, cred_i, cred_r),
    In(<G_Y, CIPHERTEXT_2>)
  ]
  -->
  [
    St_I_2(cid, method, suitesI, C_I, EAD_1, X, G_X, EAD_3, psk, cred_i, cred_r, G_Y, TH_2, PRK_2e, plaintext_2)
  ]

rule I_3_SendMessage3:
  let
    CRED_I = cred_i
    CRED_R = cred_r
    subject_i = get_subject(CRED_I)
    subject_r = get_subject(CRED_R)
    psk_from_cred = get_psk(CRED_I)  // Extract PSK from credential
    ID_CRED_PSK = make_id(CRED_I)
    PRK_3e2m = PRK_2e
    TH_3 = hash(<wrap(TH_2), plaintext_2>)
    SALT_4e3m = edhoc_kdf(PRK_3e2m, 'five', TH_3, hash_length)
    PRK_4e3m = hkdfextract(psk_from_cred, SALT_4e3m)  // Use PSK from credential
    KEYSTREAM_3A = edhoc_kdf(PRK_3e2m, 'eleven', TH_3, plaintext_length)
    K_3 = edhoc_kdf(PRK_4e3m, 'twelve', TH_3, key_length)
    IV_3 = edhoc_kdf(PRK_3e2m, 'thirteen', TH_3, iv_length)

    external_aad_3 = <ID_CRED_PSK, TH_3, CRED_I, CRED_R>
    ad_3 = <'Encrypt0', 'empty', external_aad_3> 
    plaintext_3b = <EAD_3>
    ciphertext_3b = aeadenc(plaintext_3b, K_3, IV_3, ad_3)
    plaintext_3a = <ID_CRED_PSK, ciphertext_3b>
    m3 = plaintext_3a XOR KEYSTREAM_3A
  in
  [
    St_I_2(cid, method, suitesI, C_I, EAD_1, X, G_X, EAD_3, psk, cred_i, cred_r, G_Y, TH_2, PRK_2e, plaintext_2)
  ]
  --[ 
    Eq(method, method_four),
    Eq(psk_from_cred, psk)  // Ensure PSK consistency
  ]->
  [
    St_I_3(cid, method, X, G_X, G_Y, EAD_3, psk, cred_i, cred_r, TH_3, PRK_4e3m, PRK_3e2m, ID_CRED_PSK, plaintext_3b),
    Out(m3)
  ]

rule I_4_ReceiveMessage4:
  let
    CRED_I = cred_i
    CRED_R = cred_r
    subject_i = get_subject(CRED_I)
    subject_r = get_subject(CRED_R)
    TH_4 = hash(<wrap(TH_3), ID_CRED_PSK, plaintext_3b, CRED_I, CRED_R>)
    K_4 = edhoc_kdf(PRK_4e3m, 'eight', TH_4, key_length)
    IV_4 = edhoc_kdf(PRK_3e2m, 'nine', TH_4, iv_length)
    external_aad_4 = <TH_4>
    ad_4 = <'Encrypt0', 'empty', external_aad_4>
    plaintext_4 = aeaddec(m4, K_4, IV_4, ad_4)
    // EAD_4 = plaintext_4
    PRK_out = edhoc_kdf(PRK_4e3m, 'seven', TH_4, hash_length)
  in
  [
    St_I_3(cid, method, X, G_X, G_Y, EAD_3, psk, cred_i, cred_r, TH_3, PRK_4e3m, PRK_3e2m, ID_CRED_PSK, plaintext_3b),
    In(m4),
    // !CredSubjectI(cred_i, subject_i),  // Use connection fact
    // !CredSubjectR(cred_r, subject_r)   // Use connection fact
    !SubjectI(subject_i) 
  ]
  --[ 
    AcceptI(cid, method_four, subject_i, subject_r, PRK_out, G_X, G_Y),
    FinishI(cid, PRK_out),
  ]->
  [
    St_I_Final(cid, PRK_out),
    !SessionKey(PRK_out)
  ]

// RESPONDER RULES

rule R_1_ReceiveMessage1:
  let
    TH_1 = hash(<wrap(method), wrap(suitesI), wrap(G_X), wrap(C_I), EAD_1>)
    m1 = <method,suitesI,G_X,C_I,EAD_1>
  in
  [
    !StartSession(method, suitesI, C_I, EAD_1, C_R, EAD_2, suitesR, psk, cred_i, cred_r),
    Fr(~Y),
    Fr(~EAD_4),
    Fr(~cid),
    In(m1)
  ]
  --[
    MethodOk(method),
    Start_R(~cid, method, psk, get_subject(cred_r)),
    !Honest(psk)
  ]->
  [
    St_R_1(~cid, method, suitesI, C_I, EAD_1, C_R, EAD_2, suitesR, ~Y, G_X, TH_1, ~EAD_4, psk, cred_i, cred_r),
    !DHExp(~Y)
  ]

rule R_2_SendMessage2:
  let
    G_Y = 'g'^Y
    TH_2 = hash(<wrap(G_Y), wrap(TH_1)>)
    G_XY = G_X^Y
    PRK_2e = hkdfextract(G_XY, TH_2)
    KEYSTREAM_2 = edhoc_kdf(PRK_2e, 'azero', TH_2, plaintext_length)
    plaintext_2 = <C_R, EAD_2>
    CIPHERTEXT_2 = plaintext_2 XOR KEYSTREAM_2
    m2 = <G_Y, CIPHERTEXT_2>
  in
  [
    St_R_1(cid, method, suitesI, C_I, EAD_1, C_R, EAD_2, suitesR, Y, G_X, TH_1, EAD_4, psk, cred_i, cred_r)
  ]
  -->
  [
    St_R_2(cid, method, suitesI, C_I, EAD_1, C_R, EAD_2, Y, G_Y, G_X, TH_2, PRK_2e, EAD_4, psk, cred_i, cred_r),
    Out(m2)
  ]

rule R_3_ReceiveMessage3:
  let
    CRED_R = cred_r
    CRED_I = cred_i
    subject_r = get_subject(CRED_R)
    subject_i = get_subject(CRED_I)
    psk_from_cred = get_psk(CRED_R)
    ID_CRED_PSK = make_id(CRED_R)
    PRK_3e2m = PRK_2e
    TH_3 = hash(<wrap(TH_2), <C_R, EAD_2>>)
    KEYSTREAM_3A = edhoc_kdf(PRK_3e2m, 'eleven', TH_3, plaintext_length)
    plaintext_3a = m3 XOR KEYSTREAM_3A
    SALT_4e3m = edhoc_kdf(PRK_3e2m, 'five', TH_3, hash_length)
    PRK_4e3m = hkdfextract(psk_from_cred, SALT_4e3m)  // Use PSK from credential
    K_3 = edhoc_kdf(PRK_4e3m, 'twelve', TH_3, key_length)
    IV_3 = edhoc_kdf(PRK_3e2m, 'thirteen', TH_3, iv_length)
  in
  [
    St_R_2(cid, method, suitesI, C_I, EAD_1, C_R, EAD_2, Y, G_Y, G_X, TH_2, PRK_2e, EAD_4, psk, cred_i, cred_r),
    In(m3)
  ]
  --[ 
    Eq(method, method_four),
    Eq(psk_from_cred, psk)  // Ensure PSK consistency
  ]->
  [
    St_R_3(cid, method, C_R, EAD_2, Y, G_Y, G_X, TH_3, PRK_4e3m, PRK_3e2m, EAD_4, psk, cred_i, cred_r, plaintext_3a, K_3, IV_3)
  ]

rule R_4_SendMessage4:
  let
    CRED_R = cred_r
    CRED_I = cred_i
    subject_r = get_subject(CRED_R)
    subject_i = get_subject(CRED_I)
    ID_CRED_PSK = make_id(CRED_R)
    // Decrypt and verify message 3
    ID_CRED_PSK_recv = fst(plaintext_3a)
    ciphertext_3b = snd(plaintext_3a)
    external_aad_3 = <ID_CRED_PSK_recv, TH_3, CRED_I, CRED_R>
    ad_3 = <'Encrypt0', 'empty', external_aad_3>
    plaintext_3b = aeaddec(ciphertext_3b, K_3, IV_3, ad_3)
    EAD_3 = aeaddec(ciphertext_3b, K_3, IV_3, ad_3)
    
    // Compute message 4
    TH_4 = hash(<wrap(TH_3), ID_CRED_PSK, plaintext_3b, CRED_I, CRED_R>)
    K_4 = edhoc_kdf(PRK_4e3m, 'eight', TH_4, key_length)
    IV_4 = edhoc_kdf(PRK_3e2m, 'nine', TH_4, iv_length)
    external_aad_4 = <TH_4>
    ad_4 = <'Encrypt0', 'empty', external_aad_4>
    plaintext_4 = EAD_4
    m4 = aeadenc(plaintext_4, K_4, IV_4, ad_4)
    PRK_out = edhoc_kdf(PRK_4e3m, 'seven', TH_4, hash_length)
  in
  [
    St_R_3(cid, method, C_R, EAD_2, Y, G_Y, G_X, TH_3, PRK_4e3m, PRK_3e2m, EAD_4, psk, cred_i, cred_r, plaintext_3a, K_3, IV_3),
    !SubjectR(subject_r)

  ]
  --[
    Eq(ID_CRED_PSK_recv, ID_CRED_PSK),
    AcceptR(cid, method_four, subject_i, subject_r, PRK_out, G_X, G_Y),
    FinishR(cid, PRK_out),
  ]->
  [
    St_R_Final(cid, PRK_out),
    !SessionKey(PRK_out),
    Out(m4)
  ]

// RESTRICTIONS
restriction Equality:
  "All x y #i. Eq(x,y) @i ==> x = y"

restriction OnlyMethodFour:
  "All method #i. MethodOk(method) @i ==> method = method_four"

// SECURITY LEMMAS

// // PASSED
// Simple execution lemmas for testing
// tamarin-prover --prove=exec* edhoc_psk_tamarin.spthy --derivcheck-timeout=0 -s=10

// lemma executableI_simple:
//   exists-trace
//   "Ex cid method psk subj_i #i. Start_I(cid, method, psk, subj_i) @i"

// lemma executableR_simple:
//   exists-trace
//   "Ex cid method psk subj_r #i. Start_R(cid, method, psk, subj_r) @i"

// lemma executable_full_protocol:
//   exists-trace
//   "Ex cid1 cid2 prk1 prk2 #i #j.
//     FinishI(cid1, prk1) @i &
//     FinishR(cid2, prk2) @j &
//     prk1 = prk2"

// lemma honest_setup_executable:
//   exists-trace
//   "Ex psk subj_i subj_r #i.
//      ExposeSubjectR(subj_r)@i & ExposeSubjectI(subj_i)@i & ExposeHonest(psk)@i"


// // Session key secrecy lemmas
// tamarin-prover --prove=sec* edhoc_psk_tamarin.spthy --derivcheck-timeout=0 -s=10
// // PASSED
// lemma secretR_psk:
//   "All cid subj_i subj_r prk gx gy #i #j #k.
//      AcceptR(cid, method_four, subj_i, subj_r, prk, gx, gy)@i & K(prk)@j & ExposeSubjectR(subj_r)@k
//    ==> (Ex #t. LeakSessionKey(prk)@t) 
//     | (Ex #t. LeakShare(gy)@t)
//     | (Ex #t. LeakShare(gx)@t)"

// lemma secretI_psk:
//   "All cid subj_i subj_r prk gx gy #i #j #k.
//      AcceptI(cid, method_four, subj_i, subj_r, prk, gx, gy)@i & K(prk)@j & ExposeSubjectI(subj_i)@k
//    ==> (Ex #t. LeakSessionKey(prk)@t)
//     | (Ex #t. LeakShare(gx)@t)
//     | (Ex #t. LeakShare(gy)@t)"

// // Authentication lemmas
// // PASSED
lemma honestauthRI_psk_non_inj:
  "All cid subj_i subj_r prk gx gy #i #k.
     AcceptR(cid, method_four, subj_i, subj_r, prk, gx, gy)@i & ExposeSubjectI(subj_i)@k
   ==> (Ex cid2 prk2 gx2 gy2 #t. AcceptI(cid2, method_four, subj_i, subj_r, prk2, gx2, gy2)@t & t < i & prk = prk2)
    | (Ex #t. LeakShare(gy)@t)"

// FALSIFIFED: found-trace
lemma honestauthIR_psk_non_inj:
  "All cid subj_i subj_r prk gx gy #i #k.
     AcceptI(cid, method_four, subj_i, subj_r, prk, gx, gy)@i & ExposeSubjectR(subj_r)@k
   ==> (Ex cid2 prk2 gx2 gy2 #j. AcceptR(cid2, method_four, subj_i, subj_r, prk2, gx2, gy2)@j & j < i & prk = prk2)
    | (Ex #t. LeakShare(gx)@t)"

// // Uniqueness lemmas
// // PAASED
// lemma authRI_psk_unique:
//   "All cid1 cid2 subj_i subj_r prk gx1 gy1 gx2 gy2 #i #j.
//      AcceptR(cid1, method_four, subj_i, subj_r, prk, gx1, gy1)@i & AcceptR(cid2, method_four, subj_i, subj_r, prk, gx2, gy2)@j
//    ==> #i = #j"

// lemma authIR_psk_unique:
//   "All cid1 cid2 subj_i subj_r prk gx1 gy1 gx2 gy2 #i #j.
//      AcceptI(cid1, method_four, subj_i, subj_r, prk, gx1, gy1)@i & AcceptI(cid2, method_four, subj_i, subj_r, prk, gx2, gy2)@j
//    ==> #i = #j"

// // Key agreement lemma 
// PASSED
// lemma key_agreement_psk:
//   "All cid1 cid2 subj_i subj_r prk1 prk2 gx gy #i #j.
//      AcceptI(cid1, method_four, subj_i, subj_r, prk1, gx, gy)@i &
//      AcceptR(cid2, method_four, subj_i, subj_r, prk2, gx, gy)@j
//    ==> prk1 = prk2"

// Perfect Forward Secrecy lemma 
// PASSED
// lemma pfs_psk:
//   "All cid subj_i subj_r prk gx gy #i #j #k.
//      AcceptI(cid, method_four, subj_i, subj_r, prk, gx, gy)@i & K(prk)@j & ExposeSubjectI(subj_i)@k
//    ==> (Ex #t. LeakShare(gx)@t & t < i)
//     | (Ex #t. LeakShare(gy)@t & t < i)
//     | (Ex #t. LeakSessionKey(prk)@t)"

// // Session key secrecy lemma
// Passed
// lemma session_key_secrecy:
//   "All cid prk #i.
//     FinishI(cid, prk)@i ==> not (Ex #j. K(prk)@j & not (Ex #k. LeakSessionKey(prk)@k))"

// // PSK secrecy lemma - PSK should not be leaked if honest
// lemma psk_secrecy:
//   "All psk #i #j.
//     !Honest(psk)@i & K(psk)@j ==> F"

// // Identity binding lemma - ensures credentials bind to correct subjects
// PASSED
// lemma identity_binding:
//   "All cid subj_i subj_r prk gx gy #i.
//      AcceptI(cid, method_four, subj_i, subj_r, prk, gx, gy)@i
//    ==> (Ex #j. ExposeSubjectI(subj_i)@j) & (Ex #k. ExposeSubjectR(subj_r)@k)"

// // Additional identity-specific lemmas

// // Subject identity consistency - if two sessions have same subjects, they should use same PSK
// PASSED
// lemma subject_psk_consistency:
//   "All cid1 cid2 subj_i subj_r prk1 prk2 gx1 gy1 gx2 gy2 #i #j.
//      AcceptI(cid1, method_four, subj_i, subj_r, prk1, gx1, gy1)@i &
//      AcceptR(cid2, method_four, subj_i, subj_r, prk2, gx2, gy2)@j
//    ==> prk1 = prk2"

// // Subject authenticity - responder knows initiator's real identity
// PASSED
// lemma subject_authenticity_R:
//   "All cid subj_i subj_r prk gx gy #i #j #k.
//      AcceptR(cid, method_four, subj_i, subj_r, prk, gx, gy)@i & 
//      ExposeSubjectI(subj_i)@j & ExposeSubjectR(subj_r)@k
//    ==> (Ex cid2 prk2 gx2 gy2 #t. AcceptI(cid2, method_four, subj_i, subj_r, prk2, gx2, gy2)@t)
//     | (Ex #t. LeakShare(gy)@t)"

// // Subject authenticity - initiator knows responder's real identity 
// FALSIFIED 
// lemma subject_authenticity_I:
//   "All cid subj_i subj_r prk gx gy #i #j #k.
//      AcceptI(cid, method_four, subj_i, subj_r, prk, gx, gy)@i & 
//      ExposeSubjectI(subj_i)@j & ExposeSubjectR(subj_r)@k
//    ==> (Ex cid2 prk2 gx2 gy2 #t. AcceptR(cid2, method_four, subj_i, subj_r, prk2, gx2, gy2)@t)
//     | (Ex #t. LeakShare(gx)@t)"

end
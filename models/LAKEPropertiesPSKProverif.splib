// properties.splib for EDHOC-PSK method_four

// ******************************************************************
// ************** Executability  ************************************
// ******************************************************************

lemma executableI_simple:
  exists-trace
  "Ex cid method psk subj_i #i. Start_I(cid, method, psk, subj_i) @i"

lemma executableR_simple:
  exists-trace
  "Ex cid method psk subj_r #i. Start_R(cid, method, psk, subj_r) @i"

// lemma executableI_send_m1:
//   exists-trace
//   "Ex m1 #i. Debug_I_Sending_m1(m1) @i"

lemma executable_full_protocol:
  exists-trace
  "Ex cid1 cid2 prk1 prk2 #i #j.
    FinishI(cid1, prk1) @i &
    FinishR(cid2, prk2) @j &
    prk1 = prk2"


// ******************************************************************
// ************** Confidentiality  **********************************
// ******************************************************************

// PASSED
lemma secretR_psk:
  "All cid m psk k4 ko y gx #i #j #k.
     AcceptR(cid, m, psk, k4, ko, y, gx)@i & KU(ko)@j & Honest(psk)@k
   ==> (Ex #t. LeakSessionKey(ko)@t) 
    | (Ex #t. LeakShare(y)@t)
    | (Ex #t. LeakShare(gx)@t)"

// PASSED
lemma secretI_psk:
  "All m psk k3 k4 ko x gy cid #i #j #k.
     AcceptI(cid, m, psk, k3, k4, ko, x, gy)@i & KU(ko)@j & Honest(psk)@k
   ==> (Ex #t. LeakSessionKey(ko)@t)
    | (Ex #t. LeakShare(x)@t)
    | (Ex #t. LeakShare(gy)@t)"


// ******************************************************************
// ************** Authentication  ***********************************
// ******************************************************************
// FLASIFIED
lemma honestauthRI_psk_non_inj:
  "All cid subj_i subj_r prk gx gy #i #k.
     AcceptR(cid, method_four, subj_i, subj_r, prk, gx, gy)@i & ExposeSubjectI(subj_i)@k
   ==> (Ex cid2 prk2 gx2 gy2 #t. AcceptI(cid2, method_four, subj_i, subj_r, prk2, gx2, gy2)@t & t < i & prk = prk2)
    | (Ex #t. LeakShare(gy)@t)"
// FALSIFIED
lemma honestauthIR_psk_non_inj:
  "All cid subj_i subj_r prk gx gy #i #k.
     AcceptI(cid, method_four, subj_i, subj_r, prk, gx, gy)@i & ExposeSubjectR(subj_r)@k
   ==> (Ex cid2 prk2 gx2 gy2 #j. AcceptR(cid2, method_four, subj_i, subj_r, prk2, gx2, gy2)@j & j < i & prk = prk2)
    | (Ex #t. LeakShare(gx)@t)"

// Uniqueness lemmas
// PAASED
lemma authRI_psk_unique:
  "All cid1 cid2 subj_i subj_r prk gx1 gy1 gx2 gy2 #i #j.
     AcceptR(cid1, method_four, subj_i, subj_r, prk, gx1, gy1)@i & AcceptR(cid2, method_four, subj_i, subj_r, prk, gx2, gy2)@j
   ==> #i = #j"

lemma authIR_psk_unique:
  "All cid1 cid2 subj_i subj_r prk gx1 gy1 gx2 gy2 #i #j.
     AcceptI(cid1, method_four, subj_i, subj_r, prk, gx1, gy1)@i & AcceptI(cid2, method_four, subj_i, subj_r, prk, gx2, gy2)@j
   ==> #i = #j"

// ******************************************************************
// ************** Transcript authentication  ************************
// ******************************************************************

lemma data_authentication_I_to_R_psk:
  "All psk TH_2 TH_3 TH_4 suites EAD_1 EAD_2 EAD_3 m1 p2 p3 #i #j x gy ko.
     AcceptIData(ko, method_four, psk, x, gy, <TH_2,TH_3,TH_4,suites,EAD_1,EAD_2,EAD_3,m1,p2,p3>)@i
   & Honest(psk)@j
   ==> (Ex #l. l < i & SendRData(method_four, psk, <TH_2,suites,EAD_1,EAD_2,m1,p2>)@l)
    | (Ex #l. LeakShare(x)@l)"

lemma data_authentication_R_to_I_psk:
  "All psk TH_2 TH_3 TH_4 suites EAD_1 EAD_2 EAD_3 m1 p2 p3 y gx ko #i #j.
     AcceptRData(ko, method_four, psk, y, gx, <TH_2,TH_3,TH_4,suites,EAD_1,EAD_2,EAD_3,m1,p2,p3>)@i
   & Honest(psk)@j
   ==> (Ex #l. l < i & AcceptIData(ko, method_four, psk, _, _, <TH_2,TH_3,TH_4,suites,EAD_1,EAD_2,EAD_3,m1,p2,p3>)@l)
    | (Ex #l. LeakShare(y)@l)"


// ******************************************************************
// ************** Key Agreement  ************************************
// ******************************************************************

// PASSED
lemma key_agreement_psk:
  "All cid1 cid2 m psk prk1 prk2 gx gy #i #j.
     AcceptI(cid1, m, psk, prk1, gx, gy)@i &
     AcceptR(cid2, m, psk, prk2, gx, gy)@j
   ==> prk1 = prk2"

// PASSED
lemma pfs_psk:
  "All cid subj_i subj_r prk gx gy #i #j #k.
     AcceptI(cid, method_four, subj_i, subj_r, prk, gx, gy)@i & K(prk)@j & ExposeSubjectI(subj_i)@k
   ==> (Ex #t. LeakShare(gx)@t & t < i)
    | (Ex #t. LeakShare(gy)@t & t < i)
    | (Ex #t. LeakSessionKey(prk)@t)"

// ******************************************************************
// ************** Additional Security Properties  *******************
// ******************************************************************
// PASSED
// Strong secrecy of session key if no DH leak
lemma session_key_secrecy:
  "All cid prk #i.
    FinishI(cid, prk)@i ==> not (Ex #j. K(prk)@j & not (Ex #k. LeakSessionKey(prk)@k))"

lemma subject_psk_consistency:
  "All cid1 cid2 subj_i subj_r prk1 prk2 gx1 gy1 gx2 gy2 #i #j.
     AcceptI(cid1, method_four, subj_i, subj_r, prk1, gx1, gy1)@i &
     AcceptR(cid2, method_four, subj_i, subj_r, prk2, gx2, gy2)@j
   ==> prk1 = prk2"

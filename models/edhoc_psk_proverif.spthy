/*
 * Protocol:   EDHOC-PSK
 * Source:     draft-ietf-lake-edhoc-psk
 * Model:      Cleaned for PSK authentication (method_four), no MAC or signatures
*/

theory edhoc_psk_proverif

begin

builtins: diffie-hellman, hashing, xor

functions:
  method_four/0, length/0,
  hash_length/0, edhoc_mac_length/0, key_length/0, iv_length/0, plaintext_length/0, sign_length/0, aead_length/0,
  error_code_one/0, error_code_two/0,
  suitesIConst/0, suitesRConst/0,
  edhoc_kdf/4,
  aeadenc/4, aeaddec/4 [destructor],
  make_id/1,
  wrap/1,
  hash/1, hkdfextract/2, hkdfexpand/2,
  encxor/2, decxor/2 [destructor]

equations: 
  aeaddec(aeadenc(m,k,iv,ad),k,iv,ad) = m,
  decxor(encxor(m,k),k) = m

#include "Headers.splib"

let I(~cid, ID_CRED_PSK, CRED_PSK) = 
  in(<method,suitesI,C_I,EAD_1>);
  event Start_I(~cid, method, CRED_PSK);
  event MethodOk(method);
  new ~X;
  new ~EAD_3;
  event Share(~X);
  event CompromiseShare(~X);

  let G_X = 'g'^~X in

  let m1 = <method,suitesI,G_X,C_I,EAD_1> in
  out(m1);

  in(m2);
  let <G_Y, CIPHERTEXT_2> = m2 in
  let TH_1 = hash(<wrap(method), wrap(suitesI), wrap(G_X), wrap(C_I), EAD_1>) in
  let TH_2 = hash(<wrap(G_Y), wrap(TH_1)>) in

  let G_YX = G_Y^~X in

  let PRK_2e = hkdfextract(G_YX, TH_2) in
  let KEYSTREAM_2 = edhoc_kdf(PRK_2e,'tzero',TH_2,plaintext_length) in 
  let plaintext_2 = decxor(CIPHERTEXT_2, KEYSTREAM_2) in
  let <C_R, EAD_2> = plaintext_2 in
  if (method = method_four) then (
    let PRK_3e2m = PRK_2e in
    event DerivedIShared(G_YX);

    let TH_3 = hash(<wrap(TH_2), plaintext_2>) in
    event THIShared(TH_3); 

    let SALT_4e3m = edhoc_kdf(PRK_3e2m, 'five', TH_3, hash_length) in
    let PRK_4e3m = hkdfextract(CRED_PSK, SALT_4e3m) in

    let KEYSTREAM_3 = edhoc_kdf(PRK_3e2m, 'eleven', TH_3, plaintext_length) in
    let K_3 = edhoc_kdf(PRK_4e3m, 'twelve', TH_3, key_length) in
    let IV_3 = edhoc_kdf(PRK_3e2m, 'thirteen', TH_3, iv_length) in
    
    let external_aad_3 = <ID_CRED_PSK, TH_3, CRED_PSK> in
    let ad_3 = <'Encrypt0', 'empty', external_aad_3> in    
    let plaintext_3b = <~EAD_3> in    
    let ciphertext_3b = aeadenc(plaintext_3b, K_3, IV_3, ad_3) in
    let plaintext_3a = <ID_CRED_PSK, ciphertext_3b> in
    let m3 = encxor(plaintext_3a, KEYSTREAM_3) in
    out(m3);

    let TH_4 = hash(<wrap(TH_3), ID_CRED_PSK, plaintext_3b, CRED_PSK>) in
    let K_4 = edhoc_kdf(PRK_4e3m, 'eight', TH_4, key_length) in
    let IV_4 = edhoc_kdf(PRK_3e2m, 'nine', TH_4, iv_length) in
    in(m4);

    let external_aad_4 = <TH_4> in
    let ad_4 = <'Encrypt0', 'empty', external_aad_4> in 
    let plaintext_4 = aeaddec(m4, K_4, IV_4, ad_4) in
    // let ~EAD_4 = plaintext_4 in
    let EAD_4 = plaintext_4 in
    let PRK_out = edhoc_kdf(PRK_4e3m, 'seven', TH_4, hash_length) in
    event AcceptI(~cid, method_four, CRED_PSK, PRK_out, G_X, G_Y);
    // event SecretsI(~cid,method_four,PRK_2e,PRK_3e2m,PRK_4e3m,PRK_out,KEYSTREAM_2,K_3,IV_3,~X,G_Y);
    // event AcceptIData(PRK_out,method_four,~X,G_Y,<TH_2,TH_3,TH_4,suitesI, EAD_1, EAD_2, ~EAD_3, m1, plaintext_2, plaintext_3>)
    0
  )

let R(~cid, ID_CRED_PSK, CRED_PSK) = 
  in(<C_R,EAD_2,suitesR>);
  in(<method,suitesI,G_X,C_I,EAD_1>);
  event Start_R(~cid, method, CRED_PSK);
  event MethodOk(method);
  new ~Y;
  new ~EAD_4;
  event Share(~Y);
  event CompromiseShare(~Y);

  let G_Y = 'g'^~Y in
  let G_XY = G_X^~Y in

  let TH_1 = hash(<wrap(method), wrap(suitesI), wrap(G_X), wrap(C_I), EAD_1>) in
  let TH_2 = hash(<wrap(G_Y), wrap(TH_1)>) in
  let PRK_2e = hkdfextract(G_XY, TH_2) in

  if (method = method_four) then (
    let plaintext_2 = <C_R, EAD_2> in
    let KEYSTREAM_2 = edhoc_kdf(PRK_2e, 'azero', TH_2, plaintext_length) in
    // event DerivedR(~cid,PRK_3e2m,~Y,G_X);
    event THRShared(TH_2); 	    
    event DerivedRShared(G_XY); 
    // event DerivedIdR(ID_CRED_PSK,PRK_3e2m);

    let m2 = <G_Y, encxor(plaintext_2, KEYSTREAM_2)> in
    // event SendRData(method_four,<TH_2,suitesI, EAD_1, EAD_2, m1, plaintext_2>);							    
    out(m2);

    in(m3);
    let TH_3 = hash(<wrap(TH_2), plaintext_2>) in
    let PRK_3e2m = PRK_2e in
    let SALT_4e3m = edhoc_kdf(PRK_3e2m,'five', TH_3, hash_length) in
    let PRK_4e3m = hkdfextract(CRED_PSK, SALT_4e3m) in
    let KEYSTREAM_3 = edhoc_kdf(PRK_3e2m,'eleven', TH_3,plaintext_length) in
    let K_3 = edhoc_kdf(PRK_4e3m,'twelve', TH_3, key_length) in
    let IV_3 = edhoc_kdf(PRK_3e2m,'thirteen', TH_3, iv_length) in
    let plaintext_3a = decxor(m3, KEYSTREAM_3) in
    let <ID_CRED_PSK_in, ciphertext_3b> = plaintext_3a in
    // let ad_3 = <aead_length, 'empty', TH_3> in
    let external_aad_3 = <ID_CRED_PSK, TH_3, CRED_PSK> in
    let ad_3 = <'Encrypt0', 'empty', external_aad_3> in
    let plaintext_3b = aeaddec(ciphertext_3b, K_3, IV_3, ad_3) in
    let TH_4 = hash(<wrap(TH_3), ID_CRED_PSK, plaintext_3b, CRED_PSK>) in
    let K_4 = edhoc_kdf(PRK_4e3m,'eight', TH_4, key_length) in
    let IV_4 = edhoc_kdf(PRK_3e2m, 'nine', TH_4, iv_length) in
    let PRK_out = edhoc_kdf(PRK_4e3m, 'seven', TH_4, hash_length) in
    let external_aad_4 = <TH_4> in
    let ad_4 = <'Encrypt0', 'empty', external_aad_4> in
    let m4 = aeadenc(~EAD_4, K_4, IV_4, ad_4) in
    out(m4);

    event AcceptR(~cid, method_four, CRED_PSK, PRK_out, G_Y, G_X);
    // event SecretsR(~cid,method_four,PRK_2e,PRK_3e2m,PRK_4e3m,PRK_out,KEYSTREAM_2,K_3,IV_3,~Y,G_X);
    // event AcceptRData(PRK_out,method_four,~Y,G_X,<TH_2,TH_3,TH_4,suitesI, EAD_1, EAD_2, EAD_3, m1, plaintext_2, plaintext_3>);
    // leakSKey(PRK_out)
    0
    )

process:
  // event Init();
  new ~cid;
  new ~psk;
  let CRED_PSK = ~psk in
  let ID_CRED_PSK = make_id(CRED_PSK) in
  ( I(~cid, ID_CRED_PSK, CRED_PSK) | R(~cid, ID_CRED_PSK, CRED_PSK) )

// #include "LakePropertiesPSK.splib"

// RESTRICTIONS
restriction Equality:
  "All x y #i. Eq(x,y) @i ==> x = y"

restriction OnlyMethodFour:
  "All method #i. MethodOk(method) @i ==> method = method_four"

// LEMMAS
lemma executableI_simple:
  exists-trace
  "Ex cid method psk #i. Start_I(cid, method, psk) @i"

lemma executableR_simple:
  exists-trace
  "Ex cid method psk #i. Start_R(cid, method, psk) @i"

end